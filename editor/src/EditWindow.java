/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author cthul
 */

import java.awt.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Set;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.text.BadLocationException;
import java.awt.Color;

public class EditWindow extends javax.swing.JFrame {
    
    private boolean textChanged = false;
 
    /**
     * Creates new form EditWindow
     */
    public EditWindow() {
        initComponents();
        
        // Hinzufügen eines DocumentListeners, um Änderungen im Text zu erkennen
        textInput.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                textChanged = true;
            }
            public void removeUpdate(DocumentEvent e) {
                textChanged = true;
            }
            public void changedUpdate(DocumentEvent e) {
                textChanged = true;
            }
        });
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE); // Um das Schließen zu kontrollieren
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textInput = new EditorModell();
        jScrollPane2 = new javax.swing.JScrollPane();
        textMessage = new javax.swing.JTextArea();
        searchTextField = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        tfPosition = new javax.swing.JFormattedTextField();
        lblPosition = new javax.swing.JLabel();
        gPanel1 = new display.GPanel();
        chkBoxCapitalLetter = new javax.swing.JCheckBox();
        btnspecialCharacter = new javax.swing.JButton();
        tfSpalte = new javax.swing.JFormattedTextField();
        lblSpalte = new javax.swing.JLabel();
        tfZeile = new javax.swing.JFormattedTextField();
        lblZeile = new javax.swing.JLabel();
        btnErsetzen = new javax.swing.JButton();
        ersetzenTextField = new javax.swing.JTextField();
        lblErsetzenMit = new javax.swing.JLabel();
        lblSuchenNach = new javax.swing.JLabel();
        cbVonEndeNeu = new javax.swing.JCheckBox();
        btnlaengsteZeile = new javax.swing.JButton();
        windowMenuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemOpen = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        menuItemClose = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuItemEdit = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        menuItemInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        textInput.setColumns(20);
        textInput.setRows(5);
        textInput.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        textInput.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textInputCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(textInput);

        textMessage.setEditable(false);
        textMessage.setBackground(new java.awt.Color(204, 204, 204));
        textMessage.setColumns(20);
        textMessage.setRows(5);
        textMessage.setText("Meldungen");
        jScrollPane2.setViewportView(textMessage);

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });

        btnSearch.setText("Suchen");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tfPosition.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfPosition.setText("0");
        tfPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPositionActionPerformed(evt);
            }
        });

        lblPosition.setText("Position:");

        javax.swing.GroupLayout gPanel1Layout = new javax.swing.GroupLayout(gPanel1);
        gPanel1.setLayout(gPanel1Layout);
        gPanel1Layout.setHorizontalGroup(
            gPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
        gPanel1Layout.setVerticalGroup(
            gPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        chkBoxCapitalLetter.setText("Großschreibung ignorieren");

        btnspecialCharacter.setText("Sonderzeichen einfügen");
        btnspecialCharacter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnspecialCharacterActionPerformed(evt);
            }
        });

        tfSpalte.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfSpalte.setText("0");
        tfSpalte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSpalteActionPerformed(evt);
            }
        });

        lblSpalte.setText("Spalte");

        tfZeile.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfZeile.setText("0");
        tfZeile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfZeileActionPerformed(evt);
            }
        });

        lblZeile.setText("Zeile");

        btnErsetzen.setText("Ersetzen");
        btnErsetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErsetzenActionPerformed(evt);
            }
        });

        ersetzenTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ersetzenTextFieldActionPerformed(evt);
            }
        });

        lblErsetzenMit.setText("Ersetzen mit");

        lblSuchenNach.setText("Suchen nach / Zu ersetzendes Wort");

        cbVonEndeNeu.setSelected(true);
        cbVonEndeNeu.setText("Suche von Anfangspositionstarten");

        btnlaengsteZeile.setText("Längste Zeile ermitteln");
        btnlaengsteZeile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlaengsteZeileActionPerformed(evt);
            }
        });

        menuFile.setMnemonic('D');
        menuFile.setText("Datei");

        menuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemOpen.setText("Öffnen");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuItemOpen);

        menuItemSave.setText("Speichern");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSave);

        menuItemSaveAs.setText("Speichern als");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveAs);

        menuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_DOWN_MASK));
        menuItemClose.setText("Beenden");
        menuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCloseActionPerformed(evt);
            }
        });
        menuFile.add(menuItemClose);

        windowMenuBar.add(menuFile);

        menuEdit.setText("Bearbeiten");

        menuItemEdit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuItemEdit.setText("Suchen");
        menuItemEdit.setToolTipText("");
        menuItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEditActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemEdit);

        windowMenuBar.add(menuEdit);

        menuHelp.setText("Hilfe");

        menuItemInfo.setText("Info");
        menuItemInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemInfoActionPerformed(evt);
            }
        });
        menuHelp.add(menuItemInfo);

        windowMenuBar.add(menuHelp);

        setJMenuBar(windowMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSpalte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfSpalte, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblZeile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfZeile, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ersetzenTextField)
                            .addComponent(chkBoxCapitalLetter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchTextField)
                            .addComponent(lblErsetzenMit)
                            .addComponent(btnErsetzen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnspecialCharacter, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                                .addGap(1, 1, 1))
                            .addComponent(lblSuchenNach)
                            .addComponent(gPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                            .addComponent(cbVonEndeNeu))
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnlaengsteZeile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbVonEndeNeu, chkBoxCapitalLetter});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfPosition, tfSpalte, tfZeile});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSuchenNach)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblErsetzenMit)
                        .addGap(5, 5, 5)
                        .addComponent(ersetzenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkBoxCapitalLetter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbVonEndeNeu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnErsetzen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnspecialCharacter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnlaengsteZeile)
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(gPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPosition)
                            .addComponent(tfPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfSpalte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSpalte)
                            .addComponent(tfZeile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblZeile))))
                .addGap(9, 9, 9))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnErsetzen, btnSearch, btnlaengsteZeile, btnspecialCharacter, cbVonEndeNeu, chkBoxCapitalLetter, lblPosition, searchTextField, tfPosition, tfSpalte, tfZeile});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        suchen();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        suchen();
    }//GEN-LAST:event_searchTextFieldActionPerformed

    private void menuItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEditActionPerformed
        suchen();
    }//GEN-LAST:event_menuItemEditActionPerformed

    private void menuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCloseActionPerformed
         handleExit();
    }//GEN-LAST:event_menuItemCloseActionPerformed

    private void menuItemInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemInfoActionPerformed
        info();
    }//GEN-LAST:event_menuItemInfoActionPerformed

    private void tfPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPositionActionPerformed
        textInput.setCaretPosition(Integer.parseInt(tfPosition.getText()));
        textInput.requestFocusInWindow();
    }//GEN-LAST:event_tfPositionActionPerformed

    private void textInputCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textInputCaretUpdate
        tfPosition.setText(Integer.toString(textInput.getCaretPosition()));
        tfSpalte.setText(Integer.toString(textInput.spaltenNummer()));
        tfZeile.setText(Integer.toString(textInput.zeilenNummer()));
    }//GEN-LAST:event_textInputCaretUpdate

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
        openFile();
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void btnspecialCharacterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnspecialCharacterActionPerformed
        specialCharacter();
    }//GEN-LAST:event_btnspecialCharacterActionPerformed

    private void tfSpalteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSpalteActionPerformed
        setzeSpalte();
    }//GEN-LAST:event_tfSpalteActionPerformed

    private void tfZeileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfZeileActionPerformed
        setzeZeile();
    }//GEN-LAST:event_tfZeileActionPerformed

    private void ersetzenTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ersetzenTextFieldActionPerformed
        ersetzen();
    }//GEN-LAST:event_ersetzenTextFieldActionPerformed

    private void btnErsetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnErsetzenActionPerformed
        ersetzen();
    }//GEN-LAST:event_btnErsetzenActionPerformed

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        saveAs();
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
         save();
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        handleExit();
    }//GEN-LAST:event_formWindowClosing

    private void btnlaengsteZeileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlaengsteZeileActionPerformed
        findeUndMarkiereLaengsteZeile();
    }//GEN-LAST:event_btnlaengsteZeileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<textInput-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</textInput-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditWindow().setVisible(true);
            }
        });
    }
    
    
    private void suchen() {
        
    textInput.find(searchTextField.getText(),chkBoxCapitalLetter.isSelected(), cbVonEndeNeu.isSelected());
    textMessage.append("\n\n'" + textInput.getMessage());
    textInput.requestFocusInWindow();
}
    
    private void ersetzen()
    {
        int alteCaretPosition = textInput.getCaretPosition();
        textInput.ersetzen(searchTextField.getText(), ersetzenTextField.getText(), chkBoxCapitalLetter.isSelected(), cbVonEndeNeu.isSelected());
        //taMeldungen.append("\n\n'" + textInput.getMessage());
        //textInput.requestFocusInWindow();
        textInput.setCaretPosition(alteCaretPosition);
    }
       
private void findeUndMarkiereLaengsteZeile() {
    // Den Text aus dem textInput-Feld holen
    String text = textInput.getText();
    
    // Den Text in Zeilen aufteilen
    String[] zeilen = text.split("\n");
    
    // Variablen zum Speichern der längsten Zeile und deren Index
    int laengsteZeileIndex = 0;
    int laengeDerLaengstenZeile = 0;
    
    // Schleife über alle Zeilen
    for (int i = 0; i < zeilen.length; i++) {
        int aktuelleLaenge = zeilen[i].length();
        if (aktuelleLaenge > laengeDerLaengstenZeile) {
            laengsteZeileIndex = i;
            laengeDerLaengstenZeile = aktuelleLaenge;
        }
    }
    
    // Ausgabe in textMessage: Die Zeilennummer ist laengsteZeileIndex + 1 (da Zeilen bei 0 beginnen)
    textMessage.append("\n\nDie längste Zeile ist Zeile " + (laengsteZeileIndex + 1) + " mit " + laengeDerLaengstenZeile + " Zeichen.");
    
    // Hervorhebung der längsten Zeile
    Highlighter highlighter = textInput.getHighlighter();
    HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
    
    // Beginn und Ende der längsten Zeile im Text ermitteln
    int start = 0;
    for (int i = 0; i < laengsteZeileIndex; i++) {
        start += zeilen[i].length() + 1; // +1 für den Zeilenumbruch '\n'
    }
    int end = start + laengeDerLaengstenZeile;
    
    // Alte Hervorhebungen entfernen
    highlighter.removeAllHighlights();
    
    // Versuch, die längste Zeile zu markieren
    try {
        highlighter.addHighlight(start, end, painter);
    } catch (BadLocationException e) {
        e.printStackTrace();
    }
}

    
private void info() {
    JOptionPane.showMessageDialog(null, 
        "<html><b><font size='5'>Editor</font></b><br><br>" +
        "Ein Editor mit Menü und Positionsanzeige<br>" + // Absatz eingefügt
        "<br>" + // Neuen Absatz hinzufügen
        "Zusatzfunktionen:<br>" + // Untertitel für Zusatzfunktionen
        "<br>" + // Absatz unter Zusatzfunktionen hinzufügen
        "<u><b>Finden und Hervorheben der längsten Zeile</b></u><br><br>" + // Fett und unterstrichen
        "  Die Methode <b>findeUndMarkiereLaengsteZeile</b> sucht im gesamten Textfeld <br>" +
        "  nach der Zeile mit den meisten Zeichen, gibt die Information<br>" +
        "  in der <b>textMessage</b>-Box aus und hebt die längste Zeile im <b>textInput</b> farbig hervor.<br>" +
        "  Die längste Zeile wird gelb markiert, damit sie visuell hervorsticht.<br><br>" +
        "\n" +
        "&#169; 2024 M.Ciba ITO7</html>", 
        "Info", 
        JOptionPane.INFORMATION_MESSAGE);
}




private void specialCharacter() {
    // Erstellen eines neuen Fensters (JFrame) mit dem Titel "Sonderzeichen"
    JFrame frame = new JFrame("Sonderzeichen");
    
    // Erstellen eines Panels mit einem GridLayout, das die Schaltflächen in 3 Spalten anordnet
    JPanel panel = new JPanel(new GridLayout(0, 3));
    
    // Array mit Sonderzeichen, die als Schaltflächen angezeigt werden sollen
    String[] zeichen = {
        "\u00B6", "\u00A1", "\u00A2", "\u00A3", "\u00A4", 
        "\u00A5", "\u00A9", "\u20AC", "\u00B1", "\u00B7", 
        "\u00D7", "\u00AA", "\u00BA", "\u00AB", "\u00BB", 
        "\u00BC", "\u00BD", "\u00BE", "\u2713", "\u2610", 
        "\u2611"
    };

    // Schleife über jedes Sonderzeichen im Array
    for (String zeichenStr : zeichen) {
        // Erstellen einer Schaltfläche (JButton) mit dem aktuellen Sonderzeichen als Text
        JButton button = new JButton(zeichenStr);
        
        // Hinzufügen eines ActionListeners zur Schaltfläche, der das Sonderzeichen in das Textfeld einfügt
        button.addActionListener(e -> {
            textInput.append(zeichenStr); // textInput ist das Textfeld, in das das Zeichen eingefügt wird
            
            frame.dispose();
        });
        
   
        
        // Hinzufügen der Schaltfläche zum Panel
        panel.add(button);
    }

    // Hinzufügen des Panels zum Inhalt des JFrame
    frame.getContentPane().add(panel);
    
    // Festlegen der Größe des Fensters
    frame.setSize(400, 200);
    
    // Festlegen, dass das Fenster geschlossen werden kann, ohne die gesamte Anwendung zu beenden
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    
    // Sichtbar machen des Fensters
    frame.setVisible(true);
}


private void setzeSpalte() {
       String input = tfSpalte.getText();
 
    // Überprüfen, ob der Input null oder leer ist
    if (input == null || input.trim().isEmpty()) {
        showError("Spaltenangabe ist unzulässig");
        return; // Frühzeitiges Verlassen bei Fehler
    }
 
    int spalte;
    try {
        spalte = Integer.parseInt(input);
        if (spalte < 1) {
            showError("Spaltenangabe darf nicht kleiner als 1 sein");
            return; // Frühzeitiges Verlassen bei Fehler
        }
    } catch (NumberFormatException e) {
        showError("Spaltenangabe muss eine Zahl sein");
        return; // Frühzeitiges Verlassen bei Fehler
    }
 
    int position = textInput.getCaretPosition();
    int[] ergebnis = textInput.berechneSpalte(position, spalte);
    int neuePosition = ergebnis[0];
    int maxSpalte = ergebnis[1];
    int flagSpalte = ergebnis[2];
    
    if (flagSpalte == 0) {
        showError("Spaltenangabe darf maximal " + maxSpalte + " sein");
    } else {
        textInput.requestFocusInWindow();
        textInput.setCaretPosition(neuePosition);
    }
}

private void setzeZeile() {
    String input = tfZeile.getText();
 
    // Überprüfen, ob der Input null oder leer ist
    if (input == null || input.trim().isEmpty()) {
        showError("Zeilenangabe ist unzulässig");
        return; // Frühzeitiges Verlassen bei Fehler
    }
    
    int zeile;
    try {
        zeile = Integer.parseInt(input);
        if (zeile < 1) {
            showError("Zeilenangabe darf nicht kleiner als 1 sein");
            return; // Frühzeitiges Verlassen bei Fehler
        }
    } catch (NumberFormatException e) {
        showError("Zeilenangabe muss eine Zahl sein");
        return; // Frühzeitiges Verlassen bei Fehler
    }
    
    int neuePosition = textInput.berechneZeile(zeile);
    
    if (neuePosition < 0) {
        showError("Zeilenangabe darf maximal " + (neuePosition * -1) + " sein");
    } else {
        textInput.requestFocusInWindow();
        textInput.setCaretPosition(neuePosition);
    }
}

private void showError(String message) {
    JOptionPane.showMessageDialog(null, message, "Fehler", JOptionPane.ERROR_MESSAGE);
}

private void save() {
    // Überprüfen, ob eine Datei geöffnet ist (das könnte ein Attribut in deiner Klasse sein)
    if (currentFile != null) {
        // Wenn eine Datei geöffnet ist, speichere den Text in die aktuelle Datei
        saveTextToFile(currentFile);
        textChanged = false;
    } else {
        // Wenn keine Datei geöffnet ist, führe die saveAs-Methode aus
        saveAs();
    }
}

private void saveAs() {
    JFileChooser fileChooser = new JFileChooser();

    // Dateifilter für .csv und .java hinzufügen
    fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Text Dateien (*.txt)", "txt"));
    fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("CSV Dateien (*.csv)", "csv"));
    fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Java Dateien (*.java)", "java"));
    fileChooser.setAcceptAllFileFilterUsed(false);
    

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String filePath = selectedFile.getAbsolutePath();
        
        // Hole den aktuellen Dateifilter
        String selectedExtension = "";
        if (fileChooser.getFileFilter().getDescription().contains("Text")) {
            selectedExtension = ".txt";
        } else if (fileChooser.getFileFilter().getDescription().contains("CSV")) {
            selectedExtension = ".csv";
        } else if (fileChooser.getFileFilter().getDescription().contains("Java")) {
            selectedExtension = ".java";
        }

        // Überprüfen, ob die Datei die richtige Endung hat
        if (!filePath.endsWith(selectedExtension)) {
            selectedFile = new File(filePath + selectedExtension);
        }

        // Speichern des Textes
        saveTextToFile(selectedFile);
        currentFile = selectedFile; // Setze die aktuelle Datei
        setTitle("Editor - " + currentFile.getName()); // Aktualisiere den Fenstertitel
        
        textChanged = false;
    }
}


private File currentFile; // Attribut für die aktuelle Datei


private void saveTextToFile(File file) {
    try (FileWriter fileWriter = new FileWriter(file)) {
        fileWriter.write(textInput.getText());
        textMessage.append("\n\n"+("Datei erfolgreich gespeichert!\n"));
    } catch (IOException ex) {
        textMessage.append("Fehler beim Speichern der Datei: " + ex.getMessage() + "\n");  // Fehlermeldung in der Textarea ausgeben
    }
}

private void openFile(){
            JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Text-Dateien (TXT, JAVA, CSV)", 
            "txt", "java", "csv");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            boolean opened = textInput.open(chooser.getSelectedFile());
            if (opened) {
                this.setTitle(chooser.getSelectedFile().getName());
                //currentFileChooser = chooser;
                currentFile = chooser.getSelectedFile();
                
                // Dateigröße ermitteln und anzeigen
                long fileSizeInBytes = chooser.getSelectedFile().length();
                String message = "Die Datei \"" + chooser.getSelectedFile().getName() + "\" wurde geöffnet und hat eine Größe von " + 
                                 fileSizeInBytes + " Bytes.";
                textMessage.append("\n\n" + message);
                textChanged = false;
            }
        }
}
        
// Methode zum Beenden
private void handleExit() {
    if (textChanged) {
        int option = JOptionPane.showConfirmDialog(
                this,
                "Es gibt ungespeicherte Änderungen. Möchten Sie das Programm wirklich beenden?",
                "Bestätigung",
                JOptionPane.YES_NO_OPTION
        );
        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    } else {
        System.exit(0);  // Ohne Dialog beenden, wenn nichts geändert wurde
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnErsetzen;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnlaengsteZeile;
    private javax.swing.JButton btnspecialCharacter;
    private javax.swing.JCheckBox cbVonEndeNeu;
    private javax.swing.JCheckBox chkBoxCapitalLetter;
    private javax.swing.JTextField ersetzenTextField;
    private display.GPanel gPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblErsetzenMit;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblSpalte;
    private javax.swing.JLabel lblSuchenNach;
    private javax.swing.JLabel lblZeile;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemClose;
    private javax.swing.JMenuItem menuItemEdit;
    private javax.swing.JMenuItem menuItemInfo;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JTextField searchTextField;
    private EditorModell textInput;
    private javax.swing.JTextArea textMessage;
    private javax.swing.JFormattedTextField tfPosition;
    private javax.swing.JFormattedTextField tfSpalte;
    private javax.swing.JFormattedTextField tfZeile;
    private javax.swing.JMenuBar windowMenuBar;
    // End of variables declaration//GEN-END:variables
}
